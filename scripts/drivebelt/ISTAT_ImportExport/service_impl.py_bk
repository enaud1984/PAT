#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-

from converter import JsonConverter
from dataIngestionImpl import *
from flowControl import FlowControl
from pyspark.sql.types import StructType, StructField, StringType, IntegerType, DoubleType, TimestampType, DecimalType
#from pyspark.sql.functions import col,lit
import pyspark.sql.functions as F

class IstatImportExport(FlowControl):

    schema = [{
        "Paese#nazione": "---",
        "Tonn#import_peso(double)": None,
        "export_peso(double)": None,
        "Tonn KM#import_peso_km(double)": None,
        "export_peso_km(double)": None,
        "Anno di riferimento#anno_rif(int)": -1,
        "Categoria merce#categoria_merce": "",
        "Tipo di trasporto#tipo_trasporto": "",
        "DataDiIngestion#ingestion_dttm(timestamp|%Y-%m-%dT%H:%M:%SZ)": None,
        "DataDiModifica#modifica_dttm(timestamp|%Y-%m-%dT%H:%M:%SZ)": None
    }]

    def buildDataFrame(self, buildDataFrameRequest):
        self.logger.info("IstatImportExport - buildDataFrame [{}]".format(self.app_name))
        buildDataFrameResponses = []
        try:
            self.logger.info(f"IstatImportExport - buildDataFrame INIT")
            self.logger.debug(f"IstatImportExport - buildDataFrame INIT")
            converter = JsonConverter(self.schema)
            self.logger.info(f"buildDataFrameRequest.data() - {buildDataFrameRequest.data()}")
            
            list_ = []
            for obj in buildDataFrameRequest.data() :
              #obj_ = json.loads(obj)
              s1 = json.dumps(obj)
              d2 = json.loads(s1)
              list_.extend(converter.toList(d2,header=False))
            self.logger.info(f"IstatImportExport - len(list_) - {len(list_)}")
            self.logger.info(f"IstatImportExport - list_ - {list_}")
            
            schema_s = converter.getSparkSchema()
            self.logger.info(f"IstatImportExport - schema_s - {schema_s}")

            df = converter.toDataFrameFromList(list_,self.spark.spark)
            df.show(truncate=False)

            buildDataFrameResponseImpala = BuildDataFrameResponse()
            buildDataFrameResponseImpala = buildDataFrameResponseImpala\
              .df_db(df)

            buildDataFrameResponses.append(buildDataFrameResponseImpala)

        except Exception as e:
            traceback.print_exc()
            self.manageException(e, ErrorException.APPLICATION_GENERIC_ERROR, buildDataFrameResponse)
        finally:
            return buildDataFrameResponses


##### ESECUZIONE #####
b = IstatImportExport()
b.run()