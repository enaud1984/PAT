import logging
import re

import base64
from collections import namedtuple
from typing import Union

try:
    import sqlalchemy
    from sqlalchemy import Column, Integer, String, REAL, DateTime, create_engine
    from sqlalchemy.ext.declarative import declarative_base
    from sqlalchemy.orm import sessionmaker
    from sqlalchemy.engine.url import URL
    from sqlalchemy.orm.session import object_session
    flag_sqlalchemy = True
except:
    logging.exception("No sqlalchemy Library")
    flag_sqlalchemy = False

from pat.db_utility import DbJaydebeapi
from pat.utility import Json, SqlBuilder

if flag_sqlalchemy:
    class DatabaseLogSqlAlchemy:
        engine = None
        Session = None
        Base = declarative_base()

        class Log(Base):
            __tablename__ = 'log'
            run_id = Column(String(128), primary_key=True)
            script = Column(String(64))
            description = Column(String(4000))
            execution_time = Column(REAL)
            success = Column(Integer)
            start_time = Column(DateTime)
            end_time = Column(DateTime)
            expiration_date = Column(DateTime)
            exit_code = Column(Integer)
            app_id = Column(String(255))
            log_path = Column(String(500))
            message = Column(String)

        class LogExitCode(Base):
            __tablename__ = 'log_exit_code'
            exit_code = Column(Integer, primary_key=True, autoincrement=True)
            type = Column(String(200))
            module = Column(String(200))

        class LogFile(Base):
            __tablename__ = 'log_file'
            run_id = Column(String(128), primary_key=True)
            src_name = Column(String(200))
            dst_name = Column(String(1000))
            exit_code = Column(Integer)

        class LogHDFS(Base):
            __tablename__ = 'log_hdfs'
            run_id = Column(String(128), primary_key=True)
            file_hdfs = Column(String(300))

        class LogOperation(Base):
            __tablename__ = 'log_operation'
            run_id = Column(String(128), primary_key=True)
            operation = Column(String(64), primary_key=True)
            start_time = Column(DateTime)
            end_time = Column(DateTime)
            exit_code = Column(Integer)

        def __init__(self, params):
            match = re.search(r"(.*):\/\/(.*):(.*)\/(.*)", params.get("url"))

            decode_password = params.get("decode_password", False)

            dict_params = {"username": params.get("user"),
                           "password": base64.b64decode(params.get("password")).decode(
                               "utf-8") if decode_password else params.get("password"),
                           "drivername": match.group(1),
                           "host": match.group(2),
                           "port": int(match.group(3)),
                           "database": match.group(4)
                           }
            db_connection_url = sqlalchemy.engine.url.URL(**dict_params)
            self.engine = create_engine(db_connection_url,
                                        connect_args={'options': '-csearch_path={}'.format(params.get('schema', ""))})
            self.Session = sessionmaker(self.engine, autocommit=False, expire_on_commit=False)
            self.create_tables()

        def create_tables(self):
            self.Base.metadata.create_all(self.engine)

        def insert_log(self, log_row: Union[Log, LogExitCode, LogFile, LogHDFS, LogOperation]):
            session = self.Session()
            session.add(log_row)
            session.commit()

        def get_item(self, class_name, pk_value):
            return self.Session().query(class_name).filter_by(run_id=pk_value).one()

        def update_session(self):
            self.Session().commit()

        def get_session(self):
            return self.Session()

'''
class DatabaseLogJaydebeapiOld(DbJaydebeapi):
    logger = logging.getLogger(__name__)
    schema = "ingestion"

    LogNT = namedtuple(
        "log",
        ("run_id", "script", "description", "execution_time", "success", "start_time", "end_time", "expiration_date",
         "exit_code", "app_id", "log_path", "message"),
        defaults=(None, None, None, None, 1, None, None, None, None, None, None, None)
    )

    class Log(LogNT) :
        def __setattr__(self, key, value):
            sql_builder = SqlBuilder()
            v = sql_builder.to_value3(value)
            #self = eval(f"self._replace({key}={v})")
            self._replace(message='ciao')

    LogExitCode = namedtuple(
        "log_exit_code",
        ("type", "module"),
        defaults=(None, None)
    )

    LogFile = namedtuple(
        "log_file",
        ("run_id", "src_name", "dst_name", "exit_code"),
        defaults=(None, None, None, None)
    )

    LogOperation = namedtuple(
        "log_operation",
        ("run_id", "operation", "start_time", "end_time", "exit_code"),
        defaults=(None, None, None, None, None)
    )

    def __init__(self, cfg):
        super().__init__(
            driver=Json.get_value(cfg, "driver", defval=None),
            url=Json.get_value(cfg, "url", defval=None),
            user=Json.get_value(cfg, "user", defval=None),
            password=Json.get_value(cfg, "password", defval=None),
            decode_password=Json.get_value(cfg, "decode_password", defval=False),
            jar_filepath=Json.get_value(cfg, "jar_filepath", defval=None),
            schema=Json.get_value(cfg, "schema", defval=None))

        self.log_table = "log"
        self.log_exit_code_table = "log_exit_code"
        self.log_file_table = "log_file"
        self.log_operation_table = "log_operation"

    def create_tables(self):
        query = f"""CREATE TABLE ingestion.{self.log_table} (
        run_id varchar(128) NULL,
        script varchar(64) NULL,
        description varchar(4000) NULL,
        execution_time float4 NULL,
        success int4 NULL,
        start_time timestamp(0) NULL,
        end_time timestamp(0) NULL,
        expiration_date timestamp(0) NULL,
        exit_code int4 NULL,
        app_id varchar(255) NULL,
        log_path varchar(500) NULL,
        message text NULL
        )"""
        self.execute_query(query)

        query = f"""CREATE TABLE ingestion.{self.log_exit_code_table} (
        exit_code serial4 NOT NULL,
        "type" varchar(200) NULL,
        "module" varchar(200) NULL
        )       
        """
        self.execute_query(query)

        query = f"""CREATE TABLE ingestion.{self.log_file_table} (
        run_id varchar(128) NULL,
        src_name varchar(200) NULL,
        dst_name varchar(1000) NULL,
        exit_code int4 NULL
        )"""
        self.execute_query(query)

        query = f"""CREATE TABLE ingestion.{self.log_operation_table} (
        run_id varchar(128) NOT NULL,
        operation varchar(64) NOT NULL,
        start_time timestamp NULL,
        end_time timestamp NULL,
        exit_code int4 NULL,
        CONSTRAINT log_operation_pkey PRIMARY KEY (run_id, operation)
        )"""
        self.execute_query(query)

    def insert_log(self, log_row: Union[Log, LogExitCode, LogFile, LogOperation]):
        table_name = type(log_row).__name__
        param = log_row._asdict()
        self.logger.info("log_insert param == ", param)
        # param = [list(locals().keys())[1:], list(locals().values())[1:]]  # rimuovo il primo (self) parametro input
        self.insert(
            schema=self.schema,
            table=table_name,
            columns=param.keys(),
            tuples=[param.values()]
        )

    def get_item(self, class_name, pk_value):
        where = {"run_id": pk_value}
        param = class_name._asdict()
        column = param.keys()
        res = self.select(class_name.table_name, column, where)
        res_dict = [dict(zip(column, row)) for row in res]

        for row in res_dict:
            return class_name(**row)

    def update_session(self, cls_instance=None):
        pass

    def get_session(self):
        pass
'''

class DatabaseLogJaydebeapi(DbJaydebeapi):
    logger = logging.getLogger(__name__)
    schema = "ingestion"

    table_name = {
        "Log" : "log",
        "LogExitCode": "log_exit_code",
        "LogFile": "log_file",
        "LogOperation": "log_operation"
    }

    def __init__(self, cfg):
        super().__init__(
            driver=Json.get_value(cfg, "driver", defval=None),
            url=Json.get_value(cfg, "url", defval=None),
            user=Json.get_value(cfg, "user", defval=None),
            password=Json.get_value(cfg, "password", defval=None),
            decode_password=Json.get_value(cfg, "decode_password", defval=False),
            jar_filepath=Json.get_value(cfg, "jar_filepath", defval=None),
            schema=Json.get_value(cfg, "schema", defval=None))

        self.log_table = "log"
        self.log_exit_code_table = "log_exit_code"
        self.log_file_table = "log_file"
        self.log_operation_table = "log_operation"

        #self.create_tables()


    class LogBase(dict) :
        default = {}

        def __init__(self, *args, **kw):
            z = {**self.default, **kw}
            for key, value in z.items():
                super(DatabaseLogJaydebeapi.LogBase, self).__setitem__(key, value)

        def __setattr__(self, key, value):
            super(DatabaseLogJaydebeapi.LogBase, self).__setitem__(key, value)


    class Log(LogBase) :
        default = {
            "run_id": None,
            "script": None,
            "description": None,
            "execution_time": None,
            "success": None,
            "start_time": None,
            "end_time": None,
            "expiration_date": None,
            "exit_code": None,
            "app_id": None,
            "log_path": None,
            "message": None
        }

    class LogExitCode(LogBase):
        default = {
            "exit_code": None,
            "type": None,
            "module": None
        }

    class LogFile(LogBase):
        default = {
            "run_id": None,
            "src_name": None,
            "dst_name": None,
            "exit_code": None
        }

    class LogOperation(LogBase):
        default = {
            "run_id": None,
            "operation": None,
            "start_time": None,
            "end_time": None,
            "exit_code": None
        }

    def create_tables(self):
        print("ciao")
        query = f"""CREATE TABLE ingestion.{self.log_table} (
        run_id varchar(128) NULL,
        script varchar(64) NULL,
        description varchar(4000) NULL,
        execution_time float4 NULL,
        success int4 NULL,
        start_time timestamp(0) NULL,
        end_time timestamp(0) NULL,
        expiration_date timestamp(0) NULL,
        exit_code int4 NULL,
        app_id varchar(255) NULL,
        log_path varchar(500) NULL,
        message text NULL
        )"""
        self.execute_query(query)

        query = f"""CREATE TABLE ingestion.{self.log_exit_code_table} (
        exit_code serial4 NOT NULL,
        "type" varchar(200) NULL,
        "module" varchar(200) NULL
        )       
        """
        self.execute_query(query)

        query = f"""CREATE TABLE ingestion.{self.log_file_table} (
        run_id varchar(128) NULL,
        src_name varchar(200) NULL,
        dst_name varchar(1000) NULL,
        exit_code int4 NULL
        )"""
        self.execute_query(query)

        query = f"""CREATE TABLE ingestion.{self.log_operation_table} (
        run_id varchar(128) NOT NULL,
        operation varchar(64) NOT NULL,
        start_time timestamp NULL,
        end_time timestamp NULL,
        exit_code int4 NULL,
        CONSTRAINT log_operation_pkey PRIMARY KEY (run_id, operation)
        )"""
        self.execute_query(query)

    def insert_log(self, log_row):
        if isinstance(log_row, DatabaseLogJaydebeapi.LogExitCode):
            if log_row["exit_code"] is None:
                query = "SELECT nextval('ingestion.log_exit_code_exit_code_seq')"
                x = self.execute_query(query, isSelect=True)[0][0]
                log_row["exit_code"] = x

        param = log_row
        self.logger.info("log_insert param == ", param)
        self.insert(
            schema=self.schema,
            table=self.table_name[type(param).__name__],
            columns=param.keys(),
            tuples=[param.values()]
        )

    def get_item(self, class_name, pk_value):
        where = {"run_id": pk_value}
        param = class_name._asdict()
        column = param.keys()
        res = self.select(self.table_name[type(param).__name__], column, where)
        res_dict = [dict(zip(column, row)) for row in res]

        for row in res_dict:
            return class_name(**row)

    def get_exit_code(self, type=None, module=None):
        where = {
            "type": type,
            "module": module
        }
        column = "exit_code"
        res = self.select(
            schema=self.schema,
            table="log_exit_code",
            columns=["exit_code"],
            where=where
        )
        return res[0][0]

    def update_session(self, cls_instance=None):
        if cls_instance:
            param = cls_instance
            where = None
            if isinstance(cls_instance, DatabaseLogJaydebeapi.Log):
                where = {
                    "run_id": cls_instance["run_id"]
                }
            elif isinstance(cls_instance, DatabaseLogJaydebeapi.LogFile):
                where = {
                    "run_id": cls_instance.run_id,
                    "filename": cls_instance.src_name
                }
            elif isinstance(cls_instance, DatabaseLogJaydebeapi.LogExitCode):
                where = {
                    "exit_code": cls_instance.exit_code
                }
            elif isinstance(cls_instance, DatabaseLogJaydebeapi.LogOperation):
                where = {
                    "run_id": cls_instance.run_id,
                    "operation": cls_instance.operation
                }
            self.update(
                schema=self.schema,
                table=self.table_name[type(param).__name__],
                columns=param.keys(),
                tuples=[param.values()],
                where=where
            )

    def get_session(self):
        pass



"""
test = {
    "url": "postgresql://10.206.227.231:5432/drivebelt",
    "schema": "ingestion",
    "user": "drivebelt",
    "password": "4lm42021",
    "driver": "org.postgresql.Driver",
    "jar_filepath": "postgresql-42.2.14.jar"
}

re = DatabaseLog(test)
t = Log(run_id="marco_test", message="demo")
re.insert_log(t)
print(t.run_id)
"""


class DatabaseLog(DatabaseLogJaydebeapi):
    pass
